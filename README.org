* prompt2
[[https://github.com/fimblo/prompt2/actions/workflows/ubuntu.yml/badge.svg]]
[[https://github.com/fimblo/prompt2/actions/workflows/macos.yml/badge.svg]]

prompt2 - Dynamic Shell Prompt Generator

prompt2 is a highly configurable utility designed to enhance the
command line experience by generating dynamic shell prompts. It adapts
to your environment, utilizing information such as the current git
branch, repository status, and working directory to create
context-aware prompts. This makes it a useful tool for developers and
sysadmins who require a quick, real-time overview of their system's
state directly from the command line.

** Features
- *Performance*: Executes in under 100ms on older hardware (pre-2010
  with spinning disks) and around 12-15ms on modern machines equipped
  with SSDs.
- *Customisation*: Offers customisable widgets for both git and
  default prompts that can be tailored to fit your needs.
- *Ease of Configuration*: Configurable through a simple INI file,
  making setup and adjustments straightforward.
- *Cross-Platform Compatibility*: Supports both Debian/Ubuntu and
  macOS, ensuring functionality across different systems.
- *Extensibility*: Designed with extensibility in mind, allowing for
  the addition of new widgets by writing some C code.
  
** Installation

Follow these steps to install prompt2 on your system.

| Note on the build instructions                                        |
|-----------------------------------------------------------------------|
| If the instructions below don't work for you, I advise that you check the  github action for your operating system([[.github/workflows/ubuntu.yml][Debian/Ubuntu]], [[.github/workflows/macos.yml][MacOS]]), since this should be up-to-date. |

*** Debian/Ubuntu:

#+begin_src bash
  # Install necessary dependencies
  sudo apt-get install build-essential git libgit2-dev libiniparser-dev libjson-c-dev uthash-dev
  sudo apt-get install bats

  # Clone the prompt2 repository
  git clone https://github.com/fimblo/prompt2.git

  # Navigate to the prompt2 directory
  cd prompt2

  # Compile the source and run tests
  make

  # Install prompt2 to your local bin directory
  make install-local
#+end_src


*** macOS:

#+begin_src bash
  # Install Xcode Command Line Tools if not already installed
  xcode-select --install

  # Install Homebrew if not already installed
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  # Install necessary dependencies using Homebrew
  brew install libgit2 json-c uthash iniparser
  brew install bats-core # for testing
  brew install bash # since macos vanilla bash is outdated


  # Clone the prompt2 repository
  git clone https://github.com/fimblo/prompt2.git

  # Navigate to the prompt2 directory
  cd prompt2

  # Compile the source and run tests
  make

  # Install prompt2 to your local bin directory
  make install-local
#+end_src


The make command compiles the source and runs tests, ensuring
everything is set up correctly. If you prefer to install prompt2
globally, you can use =make install= to place the binaries in
=/usr/local/bin=. Use =make help= to see other available make targets
and options.

** Usage

To test prompt2, you can use the provided script
=config/set-prompt.ini.sh=. This will only make changes in your
current bash session:

#+begin_src bash
  source path/to/prompt2/config/set-prompt.ini.sh
#+end_src



Alternatively for a more permanent setup, copy the file
=config/dot.prompt2_config.ini= to =HOME=, removing the prefix along
the way:

#+begin_src bash
  cp path/to/prompt2/config/dot.prompt2_config.ini ~/.prompt2_config.ini
#+end_src

Then add this snippet into your =.bashrc=:

#+begin_src bash
  prompt_cmd() {
    PS1=$(prompt2)
  }
  PROMPT_COMMAND=prompt_cmd
#+end_src

** Customisation

Customising prompt2 involves modifying the INI configuration file to
adjust the appearance and behavior of the prompt components, known as
widgets. The configuration file allows you to set various parameters
for each widget, such as text formatting, active and inactive states,
and colour settings.

*** Defining your prompts

Currently, there are two prompts you can configure:
- *the git prompt*: applied when standing somewhere inside of a git
  repo. To configure this, add a =prompt= entry under the =PROMPT.GIT=
  section.
- *the default prompt*: in all other situations. To configure this,
  add a =prompt= entry under the =PROMPT.DEFAULT= section.

For example, a minimal prompt setup could look like this:

#+begin_src conf
  [PROMPT.DEFAULT]
  prompt="default $ "

  [PROMPT.GIT]
  prompt="git $ "
#+end_src

This snippet would, if applied to your shell, result in the prompt
=default $= and =git $= respectively.

But this is no fun, so let's add a dynamic element to these prompts.
These dynamic instructions are called Widgets. Each Widget is wrapped
like so: =@{widgetname}= and are at runtime replaced with whatever
they represent at the time.

#+begin_src conf
  ; show the current working directory, then
  ; add the prompt character '$' change depending on if you're root or not
  [PROMPT.DEFAULT]
  prompt="default @{CWD} @{SYS.promptchar} "

  [PROMPT.GIT]
  prompt="git @{CWD} @{SYS.promptchar} "
#+end_src

Now let's make these act differently:

#+begin_src conf
  ; nonRootUser@host:~/path/to/cwd $
  [PROMPT.DEFAULT]
  prompt="@{SYS.username}@@{SYS.hostname}:@{CWD} @{SYS.promptchar} "

  ; prompt2-main ~/path/to/prompt2
  ; $
  [PROMPT.GIT]
  prompt="@{Repo.name}-@{Repo.branch_name} @{CWD}\n@{SYS.promptchar} "
#+end_src

There is one miscellaneous configuration - for the style of printing
the CWD. This is under the =MISC= section, and:
- =cwd_type=: This can be home, basename, full and git.
  - =home=: show the path from your home directory. This is used if
    =cwd_type= is unset.
  - =basename=: show only the name of the directory you're standing
    in.
  - =full=: show the full path from /
  - =git=: show the path from the root of the git repo. 

Here's what it could look like if one writes it out with =CWD= set to
basename, and showing at most 10 characters of the git repo branch
name:

#+begin_src conf
  [PROMPT.DEFAULT]
  prompt="@{SYS.username}@@{SYS.hostname}:@{CWD} @{SYS.promptchar} "

  [PROMPT.GIT]
  prompt="@{Repo.name}-@{Repo.branch_name} @{CWD}\n@{SYS.promptchar} "

  [MISC]
  cwd_type="basename"
#+end_src

This miscellaneous configuration will be folded into the widget
configurations at a later date, so that one could have different CWD
types in the git prompt and the default prompt ([[https://github.com/fimblo/prompt2/issues/42][Issue #42]]).

*** Widgets

Here's a list of all the widgets supported currently:

#+begin_example
CWD                          # current working directory
Repo.is_git_repo             # if . is a git repo
Repo.name                    # name of git repo
Repo.branch_name             # name of branch
Repo.rebase_active           # if rebase is in progress
Repo.conflicts               # number of conflicts in repo
Repo.ahead                   # number of commits ahead of remote
Repo.behind                  # number of commits behind remote
Repo.staged                  # number of staged files
Repo.modified                # number of changed modified files
Repo.untracked               # number of untracked files
AWS.token_is_valid           # if there is a valid AWS SSO token
AWS.token_remaining_hours    # AWS SSO token: how many hours are remaining
AWS.token_remaining_minutes  # AWS SSO token: how many minutes are remaining
SYS.username                 # username
SYS.hostname                 # hostname
SYS.uid                      # the effective uid of the user
SYS.gid                      # the effective gid of the user
SYS.promptchar               # set to '#' if the uid==0, '$' otherwise
SPC                          # spacefiller (see below)
#+end_example

Notes on the widgets:
- =CWD=: This widget, which prints the path to your location in the
  filesystem, will automatically be truncated if the path won't fit in
  your terminal.
- =SPC=: Can be used once on each line of the prompt to align the
  remaining widgets to the right of the terminal.

*** Customising Widgets

So far, we've been configuring what widgets and strings go into a
prompt. But you can also configure the widgets themselves - what the
widgets should be replaced with when active or inactive and what
colours to use.

To customise the Default settings for all widgets, you can modify its
settings in the INI file as follows:

#+begin_src conf
  [WIDGET_DEFAULT]
  max_width=256              # shorten if longer than this
  string_active="%s"
  string_inactive="%s"
  colour_on="\[\e[36;22m\]"  # Active colour in cyan
  colour_off="\[\e[36;2m\]"  # Inactive colour in dim cyan
#+end_src

- =max_width=: The space a widget takes in the prompt, sans terminal
  escape codes. All widgets will be shortened on the right edge except
  for CWD where the beginning is cut away. Like mentioned above, CWD
  is automatically shortened if it doesn't fit in the terminal (so you
  only need to set =max_width= if you want to).

- =string_active= and =string_inactive=: These parameters define the
  format strings used when the widget is active or inactive. You can
  include placeholders and formatting options here.

- =colour_on= and =colour_off=: These parameters control the text
  colour for the active and inactive states of the widget. The colour
  codes are specified using ANSI escape sequences.

  - Standard ANSI Colours: You can use standard ANSI colour codes such
    as =\[\e[31m\]= for red, =\[\e[32m\]= for green, etc. These are
    widely supported and easy to use.

  - RGB Colours: For more precise colour control, you can specify RGB
    values using the ANSI escape sequences for 24-bit colour. This is
    done using the sequences =\[\e[38;2;R;G;Bm\]= for foreground
    colours and =\[\e[48;2;R;G;Bm\]= for background colours, where R,
    G, and B represent the red, green, and blue components of the
    colour, respectively. Each component can be a value from 0 to 255.

  For example, to set the foreground colour to a specific shade of blue
  using RGB values, you would use:
  #+begin_src conf
    colour_on="\[\e[38;2;0;120;215m\]"  # A nice shade of blue
  #+end_src

  Similarly, to set a background colour using RGB, you might use:
  #+begin_src conf
    colour_off="\[\e[48;2;255;200;0m\]"  # A warm yellow background
  #+end_src

  Note: it's sometimes hard to know what colours look nice. I've
  supplied a small script in =scripts/print_colours.pl= which prints
  all the named rgb combos used in the [[https://www.x.org/wiki/][Xorg project]]. Run it in your
  terminal like this:
  #+begin_src bash
    $ perl scripts/print_colours.pl
  #+end_src


**** Overriding the default widget

Each individual widget can override the default setting, for example
for =Repo.branch_name= here, where we normally would shorten longer
branch names to save space in the terminal.

#+begin_src conf
  [Repo.branch_name]
  max_width=20
#+end_src


We might also want to override =string_inactive= to show a hyphen
if there is no defined branch name yet:
#+begin_src conf
  [Repo.branch_name]
  max_width=20
  string_inactive="-"
#+end_src

Here's another example, where prompt2 will only show the conflict
widget if there is a git conflict. In other situations, it will not be
visible.

#+begin_src conf
  [Repo.conflicts]
  string_active="<conflicts: %s>"
  string_inactive=""
  colour_on="\[\e[35m\]"
  colour_off=""
#+end_src

**** Nesting widgets

prompt2 supports nested widgets (only one layer deep). Here's an
example with some annotation to make things a little easier to
understand.

#+begin_src conf
  # Here we have a simple prompt which has one widget in it -
  # =AWS.token_is_valid=. This widget is active if you have a valid aws
  # token right now.

  [PROMPT.DEFAULT]
  prompt="@{AWS.token_is_valid} $ "

  # The widget in question will, if active (valid token), be replaced
  # with the two widgets below, with some decorations.
  # As you can see, when it's inactive, then it's replaced with nothing.
  [AWS.token_is_valid]
  string_active="<@{AWS.token_remaining_hours}:@{AWS.token_remaining_minutes}>"
  string_inactive=""

  # The minute portion of the token's remaining validity will be shown
  # regardless of if it's active or not. However, if the remaining time
  # goes under a threshold of ten minutes, it will go active - and
  # change to a red colour.
  [AWS.token_remaining_minutes]
  colour_on="\[\e[35m\]"
  colour_off=""
#+end_src


** Third-party Licenses

prompt2 is distributed under the GNU General Public License v3
(GPLv3), which allows users to use, modify, and distribute the
software, provided that all copies and derivatives remain under the
same license. This ensures that improvements and modifications to the
software remain free and accessible to the community.

This project includes the =etc/rgb.txt= file from Xorg, which is
licensed under the MIT License. The original license text for this
file can be found in the =etc/LICENSE_rgb.txt= file in this
repository.
