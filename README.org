* prompt2
[[https://github.com/fimblo/prompt2/actions/workflows/build-and-test.yml/badge.svg]]

prompt2 - Dynamic Shell Prompt Generator

I wrote prompt2 because I wanted a bash prompt which provided me with
a quick, real-time overview of the system's state from the command
line. Aside from the normal things one can find in PS1, such as
hostname and cwd, I wanted a prompt which behaved differently in a
normal directory and in a git repo. While doing this, I added other
features, like AWS authentication state.


** Features
- *Performance*: Executes in around 10-13ms on modern machines.
- *Configuration*: Offers fully customisable prompt definitions. It's easy too.
- *Cross-Platform Compatibility*: Tested on Debian/Ubuntu and macOS.
  
** Installation

Follow these steps to install prompt2 on your system.

| Note on the build instructions                                        |
|-----------------------------------------------------------------------|
| If the instructions below don't work for you, I advise that you check the  github action for your operating system([[.github/workflows/ubuntu.yml][Debian/Ubuntu]], [[.github/workflows/macos.yml][MacOS]]), since this should be up-to-date. |

*** Debian/Ubuntu:

#+begin_src bash
  # Install necessary dependencies
  sudo apt-get install build-essential git libgit2-dev libiniparser-dev libjson-c-dev uthash-dev
  sudo apt-get install bats

  # Clone the prompt2 repository
  git clone https://github.com/fimblo/prompt2.git

  # Navigate to the prompt2 directory
  cd prompt2

  # Compile the source and run tests
  make

  # Install prompt2 to ~/bin
  make install-local
#+end_src


*** macOS:

#+begin_src bash
  # Install Xcode Command Line Tools if not already installed
  xcode-select --install

  # Install Homebrew if not already installed
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  # Install necessary dependencies using Homebrew
  brew install libgit2 json-c uthash iniparser
  brew install bats-core # for testing
  brew install bash # since macos vanilla bash is outdated


  # Clone the prompt2 repository
  git clone https://github.com/fimblo/prompt2.git

  # Navigate to the prompt2 directory
  cd prompt2

  # Compile the source and run tests
  make

  # Install prompt2 to ~/bin
  make install-local
#+end_src


The make command compiles the source and runs tests, ensuring
everything is set up correctly. If you prefer to install prompt2
globally, you can use =make install= to place the binaries in
=/usr/local/bin=. Use =make help= to see other available make targets
and options.

** Usage

To test prompt2, you can use the provided script
=config/set-prompt.ini.sh=. This will only make changes in your
current bash session:

#+begin_src bash
  source path/to/prompt2/config/set-prompt.ini.sh
#+end_src



Alternatively for a more permanent setup, copy the file
=config/dot.prompt2_config.ini= to =HOME=, removing the prefix along
the way:

#+begin_src bash
  cp path/to/prompt2/config/dot.prompt2_config.ini ~/.prompt2_config.ini
#+end_src

Then add this snippet into your =.bashrc=:

#+begin_src bash
  prompt_cmd() {
    PS1=$(prompt2)
  }
  PROMPT_COMMAND=prompt_cmd
#+end_src

** Customisation

Customising prompt2 involves modifying the INI configuration file to
adjust the appearance and behavior of the prompt components, known as
Widgets. The configuration file allows you to set various parameters
for each widget, such as text formatting, active and inactive states,
and style Attributes.

For all the details, see the separate documentation for [[Customisation.md][Customisation]].
But if you just want to take a look at what it could look like, see
below:

#+begin_src ini
  [PROMPT]
  prompt="@{SYS.username}@@{SYS.hostname}:@{CWD}@{SPC}@{Repo.is_nascent_repo}\n\
  @{SYS.promptchar} "

  [PROMPT.GIT]
  prompt="<@{Repo.name}><@{Repo.branch_name}>\
  [@{Repo.behind},@{Repo.ahead}|@{Repo.staged},@{Repo.modified},@{Repo.untracked}] \
  @{CWD}@{SPC}@{Repo.rebase_active}\
  \n\
  @{Repo.conflicts}@{SYS.promptchar} "

  cwd_type="git" # override default CWD style with path from git root


  [WIDGET_DEFAULT]
  # The hard-coded widget defaults are:
  # string_active="%s"
  # string_inactive="%s"
  # colour_on=""
  # colour_off=""
  # max_width=256
  #
  # These can be overridden in the config, like so:
  colour_on="%{fg cyan}"
  colour_off="%{fg cyan,dim}"


  # The rest of the Widget configs below override WIDGET_DEFAULT for
  # their respective widgets.                 

  [Repo.name]
  string_inactive="-"

  [Repo.branch_name]
  max_width=17
  string_inactive="-"

  [Repo.rebase_active]
  string_active="<interactive rebase>"
  string_inactive=""
  colour_on="%{fg red, italic}"
  colour_off=""

  [Repo.conflicts]
  string_active="<conflicts: %s> "
  string_inactive=""
  colour_on="%{fg red, italic}"
  colour_off=""

  [Repo.is_nascent_repo]
  string_active=" <git init> "
  string_inactive=""
  colour_on="%{fg black, bg-sandyBrown, italic}"
  colour_off=""
#+end_src

** Contributing

Oh fun!

You're welcome to contribute to this project. Here are some guidelines
I ask that you respect. Please:

- Ensure that your PRs have a title and description which covers the
  purpose of the change as well as a high-level explanation of the
  changes made. If the PR fixes a github issue, I ask that you link to
  said issue (e.g. "Fixes #47").
- Use [[https://www.conventionalcommits.org/en/v1.0.0/][Conventional commit]] messages. I also make use of the types in
  the Angular convention, like =build:=, =chore:=, =ci:=, =docs:=,
  =style:=, =refactor:=, =perf:=, and =test:=. Oh and try to keep the
  commits small and focussed on a single change. This makes it much
  easier for me to review your change.
- If you add or change functionality, please ensure to update the
  tests and documentation.

** Third-party Licenses

prompt2 is distributed under the GNU General Public License v3
(GPLv3), which allows users to use, modify, and distribute the
software, provided that all copies and derivatives remain under the
same license. This ensures that improvements and modifications to the
software remain free and accessible to the community.

This project includes the =etc/rgb.txt= file from Xorg, which is
licensed under the MIT License. The original license text for this
file can be found in the =etc/LICENSE_rgb.txt= file in this
repository.
